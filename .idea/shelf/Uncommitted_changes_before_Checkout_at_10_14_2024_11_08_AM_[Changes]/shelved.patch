Index: board.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nStarting Template\r\n\r\nOnce you have learned how to use classes, you can begin your program with this\r\ntemplate.\r\n\r\nIf Python and Arcade are installed, this example can be run from the command line with:\r\npython -m arcade.examples.starting_template\r\n\"\"\"\r\nimport arcade\r\nimport arcade.gui\r\n\r\n# Global Var: Screen Size\r\nSCREEN_WIDTH = 800\r\nSCREEN_HEIGHT = 600\r\n# Global Var: Window Title\r\nSCREEN_TITLE = \"Carcassonne\"\r\nSTART = 0\r\nEND = 2000\r\nSTEP = 50\r\n# Global Var: Sprite Scaling\r\nSPRITE_SCALING_PLAYER = 0.2\r\nSPRITE_SCALING_SCORE = 0.15\r\nSPRITE_SCALING_TILE = 0.3\r\nSPRITE_SCALING_HELP = 1\r\n# Global Var: Text\r\nDEFAULT_LINE_HEIGHT = 45\r\n\r\n\r\n\r\nclass QuitButton(arcade.gui.UIFlatButton):\r\n    def on_click(self, event: arcade.gui.UIOnClickEvent):\r\n        arcade.exit()\r\n\r\nclass GameView(arcade.View):\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        # Initialize Background Imgae\r\n        self.background = arcade.load_texture(\"wood.jpg\")\r\n        # Initalize sprite lists\r\n        self.player_list = None\r\n        self.scoreboard_list = None\r\n        self.tile_list = None\r\n        self.help_list = None\r\n\r\n    def setup(self):\r\n        \"\"\" Set up the game variables. Call to re-start the game. \"\"\"\r\n\r\n        # Create sprite lists\r\n        self.player_list = arcade.SpriteList()\r\n        self.scoreboard_list = arcade.SpriteList()\r\n        self.tile_list = arcade.SpriteList()\r\n        self.help_list = arcade.SpriteList()\r\n        # Meeple sprite\r\n        img = \"Meeple.jpg\"\r\n        self.player_sprite = arcade.Sprite(img,\r\n                                           SPRITE_SCALING_PLAYER)\r\n        self.player_sprite.center_x = 100\r\n        self.player_sprite.center_y = 90\r\n        self.player_list.append(self.player_sprite)\r\n        # Scoreboard Sprite\r\n        scoreboard = \"scoreboard.jpg\"\r\n        self.scoreboard_sprite = arcade.Sprite(scoreboard,\r\n                                               SPRITE_SCALING_SCORE)\r\n        self.scoreboard_sprite.center_x = 250\r\n        self.scoreboard_sprite.center_y = 80\r\n        self.scoreboard_list.append(self.scoreboard_sprite)\r\n        # Tile Sprite\r\n        tile = \"tile.jpg\"\r\n        self.tile_sprite = arcade.Sprite(tile,\r\n                                         SPRITE_SCALING_TILE)\r\n        self.tile_sprite.center_x = 400\r\n        self.tile_sprite.center_y = 85\r\n        self.tile_list.append(self.tile_sprite)\r\n        # Help Sprite\r\n        help = \":resources:onscreen_controls/shaded_dark/gear.png\"\r\n        self.help_sprite = arcade.Sprite(help,\r\n                                         SPRITE_SCALING_HELP)\r\n        self.help_sprite.center_x = 750\r\n        self.help_sprite.center_y = 550\r\n        self.help_list.append(self.help_sprite)\r\n\r\n\r\n    def on_draw(self):\r\n        \"\"\"\r\n        Render the screen.\r\n        \"\"\"\r\n        # Start With a Fresh Screen\r\n        self.clear()\r\n        # Start the Rendering Process\r\n        arcade.start_render()\r\n\r\n        # Drawing the background image\r\n        arcade.draw_texture_rectangle(SCREEN_WIDTH/2,\r\n                                      SCREEN_HEIGHT/2,\r\n                                      SCREEN_WIDTH,\r\n                                      SCREEN_HEIGHT,\r\n                                      self.background)\r\n        # Drawing Sprite Lists\r\n        self.scoreboard_list.draw()\r\n        self.help_list.draw()\r\n        self.tile_list.draw()\r\n        self.player_list.draw()\r\n        # Drawing Text, Need From Player Class?\r\n        start_x = 500\r\n        start_y = 75\r\n        arcade.draw_text(\"Player 1\",\r\n                         start_x,\r\n                         start_y,\r\n                         arcade.color.WHITE,\r\n                         30,\r\n                         font_name=\"Kenney Future\")\r\n        # Drawing Text, For Meeples. Need Meepl count from player?\r\n        start_meeple_x = 10\r\n        start_meeple_y= 50\r\n        arcade.draw_text(\"# Meeples\",\r\n                         start_meeple_x,\r\n                         start_meeple_y,\r\n                         arcade.color.WHITE,\r\n                         12,\r\n                         font_name=\"Kenney Future\")\r\n        # Drawing Text, For Tile. Need Tile From Tile Class?\r\n        start_tile_x = 350\r\n        start_tile_y = 50\r\n        arcade.draw_text(\"Your Tile\",\r\n                         start_tile_x,\r\n                         start_tile_y,\r\n                         arcade.color.WHITE,\r\n                         12,\r\n                         font_name=\"Kenney Future\")\r\n        # Drawing Text, For Scoreboard.\r\n        start_tile_x = 175\r\n        start_tile_y = 50\r\n        arcade.draw_text(\"Scoreboard\",\r\n                         start_tile_x,\r\n                         start_tile_y,\r\n                         arcade.color.WHITE,\r\n                         12,\r\n                         font_name=\"Kenney Future\")\r\n\r\n    def on_update(self, delta_time):\r\n        \"\"\"\r\n        All the logic to move, and the game logic goes here.\r\n        Normally, you'll call update() on the sprite lists that\r\n        need it.\r\n            \"\"\"\r\n        for sprite in self.tile_list:\r\n            if sprite.x > self.screen_width:\r\n                sprite.vx = -30\r\n            elif sprite.x < 0:\r\n                sprite.vx = 30\r\n\r\n\r\n    def on_resize(self, width, height):\r\n        \"\"\" This method is automatically called when the window is resized. \"\"\"\r\n\r\n        # Call the parent. Failing to do this will mess up the coordinates,\r\n        # and default to 0,0 at the center and the edges being -1 to 1.\r\n        tile_collison = arcade.get_sprites_at_point((100, 100),\r\n                                                     self.tile_list)\r\n        super().on_resize(width, height)\r\n\r\n        print(f\"Window resized to: {width}, {height}\")\r\n\r\n    def on_key_press(self, key, key_modifiers):\r\n        \"\"\"\r\n        Called whenever a key on the keyboard is pressed.\r\n        \"\"\"\r\n        pass\r\n\r\n    def on_key_release(self, key, key_modifiers):\r\n        \"\"\"\r\n        Called whenever the user lets off a previously pressed key.\r\n        \"\"\"\r\n        pass\r\n\r\n    def on_mouse_motion(self, x, y, delta_x, delta_y):\r\n        \"\"\"\r\n        Called whenever the mouse moves.\r\n        \"\"\"\r\n        # Allow Sprite to Move With Mouse\r\n        if self.dragging_sprite:\r\n            self.dragging_sprite.center_x += delta_x\r\n            self.dragging_sprite.center_y += delta_y\r\n            # Allow Sprite to Move With Mouse\r\n        if self.dragging_meeple:\r\n            self.dragging_meeple.center_x += delta_x\r\n            self.dragging_meeple.center_y += delta_y\r\n\r\n        clicked_meeple = arcade.get_sprites_at_point((0, 0),\r\n                                                     self.tile_list)\r\n        if clicked_meeple:\r\n            print(\"hi\")\r\n\r\n\r\n\r\n    def on_mouse_press(self, x, y, button, key_modifiers):\r\n        \"\"\"\r\n        Called when the user presses a mouse button.\r\n\r\n        \"\"\"\r\n        # If Left Button on Mouse Clicked on Tile\r\n        if button == arcade.MOUSE_BUTTON_LEFT:\r\n            clicked_tile = arcade.get_sprites_at_point((x,y),\r\n                                                       self.tile_list)\r\n            if len(self.player_list) <2:\r\n                # have to keep a count for this so only one per turn can be used\r\n                clicked_meeple = arcade.get_sprites_at_point((x, y),\r\n                                                         self.player_list)\r\n\r\n                new_meeple = arcade.get_sprites_at_point((x, y),\r\n                                                         self.player_list)\r\n                # meeples, allow dragging\r\n            if clicked_meeple:\r\n                self.dragging_meeple = new_meeple[0]\r\n\r\n            # Allow dragging to be possible\r\n            if clicked_tile:\r\n                self.dragging_sprite = clicked_tile[0]\r\n\r\n    def on_mouse_release(self, x, y, button, key_modifiers):\r\n        \"\"\"\r\n        Called when a user releases a mouse button.\r\n        \"\"\"\r\n        # If Lest Mouse Is Relased stop dragging\r\n        if button == arcade.MOUSE_BUTTON_LEFT:\r\n            self.dragging_sprite = None\r\n            self.dragging_meeple = None\r\n            # If scoreboard was clicked then released\r\n            clicked_scoreboard = arcade.get_sprites_at_point((x, y),\r\n                                                       self.scoreboard_list)\r\n            clicked_help = arcade.get_sprites_at_point((x, y),\r\n                                                          self.help_list)\r\n\r\n            if clicked_help:\r\n                help_view = HelpView()\r\n                help_view.setup()\r\n                self.window.show_view(help_view)\r\n\r\n            if clicked_scoreboard:\r\n                scoreboard_view = ScoreboardView()\r\n                scoreboard_view.setup()\r\n                self.window.show_view(scoreboard_view)\r\n\r\n\r\nclass OpenView(arcade.View):\r\n    \"\"\" View to Open Game\"\"\"\r\n\r\n    def on_show_view(self):\r\n        \"\"\" This is run once when we switch to this view \"\"\"\r\n        arcade.set_background_color(arcade.csscolor.STEEL_BLUE)\r\n        arcade.set_viewport(0,\r\n                            self.window.width,\r\n                            0,\r\n                            self.window.height)\r\n\r\n    def on_draw(self):\r\n        \"\"\" Draw this view \"\"\"\r\n        self.clear()\r\n        arcade.draw_text(\"Welcome Screen\",\r\n                         self.window.width / 2,\r\n                         self.window.height / 2,\r\n                         arcade.color.WHITE,\r\n                         font_size=50,\r\n                         anchor_x=\"center\",\r\n                         font_name=\"Kenney Future\")\r\n        arcade.draw_text(\"How Many Players\",\r\n                         self.window.width / 2,\r\n                         self.window.height / 2-75,\r\n                         arcade.color.WHITE,\r\n                         font_size=20,\r\n                         anchor_x=\"center\",\r\n                         font_name=\"Kenney Future\")\r\n    def on_mouse_press(self, _x, _y, _button, _modifiers):\r\n        \"\"\" If the user presses the mouse button, start the game. \"\"\"\r\n        game_view = GameView()\r\n        game_view.setup()\r\n        self.window.show_view(game_view)\r\n\r\nclass ScoreboardView(arcade.View):\r\n    \"\"\" View to show Scoreboard \"\"\"\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        # Initialize Player From Player Class?\r\n        self.player_list = None\r\n\r\n    def setup(self):\r\n        \"\"\" Set up the game variables. Call to re-start the game. \"\"\"\r\n        pass\r\n\r\n    def on_show_view(self):\r\n        \"\"\" This is run once when we switch to this view \"\"\"\r\n        self.background = arcade.load_texture(\"notepad.jpg.png\")\r\n        arcade.set_viewport(0,\r\n                            self.window.width,\r\n                            0,\r\n                            self.window.height)\r\n\r\n    def on_draw(self):\r\n        \"\"\" Draw this view \"\"\"\r\n        self.clear()\r\n        arcade.draw_texture_rectangle(SCREEN_WIDTH / 2,\r\n                                      SCREEN_HEIGHT / 2,\r\n                                      SCREEN_WIDTH,\r\n                                      SCREEN_HEIGHT,\r\n                                      self.background)\r\n        # Title for Score board\r\n        arcade.draw_text(\"Scoreboard\",\r\n                         self.window.width / 2 +  30,\r\n                         self.window.height - 60 ,\r\n                         arcade.color.BLACK,\r\n                         font_size=50,\r\n                         anchor_x=\"center\",\r\n                         font_name=\"Kenney Future\")\r\n        # Player and Numbers maybe in for loop\r\n        arcade.draw_text(\"Player 1\", 150,\r\n                         self.window.height - 150,\r\n                         arcade.color.BLACK,\r\n                         font_size=20,\r\n                         anchor_x=\"left\",\r\n                         font_name=\"Kenney Future\")\r\n        arcade.draw_text(\"20\", 400,\r\n                         self.window.height - 150,\r\n                         arcade.color.BLACK,\r\n                         font_size=20,\r\n                         anchor_x=\"left\",\r\n                         font_name=\"Kenney Future\")\r\n        # Player and Numbers maybe in for loop?\r\n        arcade.draw_text(\"Player 2\", 150,\r\n                         self.window.height - 250,\r\n                         arcade.color.BLACK,\r\n                         font_size=20,\r\n                         anchor_x=\"left\",\r\n                         font_name=\"Kenney Future\")\r\n        arcade.draw_text(\"30\", 400,\r\n                         self.window.height - 250,\r\n                         arcade.color.BLACK,\r\n                         font_size=20,\r\n                         anchor_x=\"left\",\r\n                         font_name=\"Kenney Future\")\r\n    def on_mouse_press(self, _x, _y, _button, _modifiers):\r\n        \"\"\" If mouse clicked move to board view \"\"\"\r\n        game_view = GameView()\r\n        game_view.setup()\r\n        self.window.show_view(game_view)\r\n\r\nclass HelpView(arcade.View):\r\n    \"\"\" View to show Help View\"\"\"\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n\r\n    def setup(self):\r\n        \"\"\" Set up the game variables. Call to re-start the game. \"\"\"\r\n        pass\r\n\r\n    def on_show_view(self):\r\n        \"\"\" This is run once when we switch to this view \"\"\"\r\n        self.background = arcade.load_texture(\"notepad.jpg.png\")\r\n        arcade.set_viewport(0,\r\n                            self.window.width,\r\n                            0,\r\n                            self.window.height)\r\n\r\n    def on_draw(self):\r\n        \"\"\" Draw this view \"\"\"\r\n        self.clear()\r\n        arcade.draw_texture_rectangle(SCREEN_WIDTH / 2,\r\n                                      SCREEN_HEIGHT / 2,\r\n                                      SCREEN_WIDTH,\r\n                                      SCREEN_HEIGHT,\r\n                                      self.background)\r\n        # Title for Score board\r\n        arcade.draw_text(\"NEED HELP?\",\r\n                         self.window.width / 2 +  30,\r\n                         self.window.height - 60 ,\r\n                         arcade.color.BLACK,\r\n                         font_size=50,\r\n                         anchor_x=\"center\",\r\n                         font_name=\"Kenney Future\")\r\n\r\n    def on_mouse_press(self, _x, _y, _button, _modifiers):\r\n        \"\"\" If mouse clicked move to board view \"\"\"\r\n        game_view = GameView()\r\n        game_view.setup()\r\n        self.window.show_view(game_view)\r\n\r\ndef main():\r\n    \"\"\" Main function \"\"\"\r\n    window = arcade.Window(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)\r\n    start_view = OpenView()\r\n    window.show_view(start_view)\r\n    arcade.run()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/board.py b/board.py
--- a/board.py	(revision a7672b03e3787dcb15b8d5ce1f6ce7e1b79e5f6b)
+++ b/board.py	(date 1728918424533)
@@ -145,11 +145,7 @@
         Normally, you'll call update() on the sprite lists that
         need it.
             """
-        for sprite in self.tile_list:
-            if sprite.x > self.screen_width:
-                sprite.vx = -30
-            elif sprite.x < 0:
-                sprite.vx = 30
+
 
 
     def on_resize(self, width, height):
